# –ø–∫–ø–∏–∫–∞–ø–∫–∏–∫–≤–∫.py ‚Äî –≥–æ—Ç–æ–≤—ã–π –¥–ª—è Railway (user session, –±–µ–∑ input)
import os
import threading
import http.server
import socketserver
import random
from time import sleep
from telethon.sync import TelegramClient, errors
from telethon.errors.rpcerrorlist import MessageTooLongError, PeerIdInvalidError
from telethon.sessions import StringSession
from telethon.tl.patched import MessageService  # –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

def mask(s):
    if not s: return None
    s = str(s)
    if len(s) <= 8:
        return s
    return s[:3] + "..." + s[-3:]

# --- –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
api_id_raw = os.environ.get("API_ID")
api_hash = os.environ.get("API_HASH")
session_string = os.environ.get("SESSION_STRING")
base_delay = int(os.environ.get("BASE_DELAY", "30"))
PORT = int(os.environ.get("PORT", 8080))

print("DEBUG: API_HASH:", mask(api_hash), flush=True)
print("DEBUG: SESSION_STRING present:", bool(session_string), flush=True)
print("DEBUG: BASE_DELAY:", base_delay, flush=True)
print("DEBUG: HTTP server will run on port:", PORT, flush=True)

if not api_id_raw or not api_hash:
    raise ValueError("API_ID –∏–ª–∏ API_HASH –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

try:
    api_id = int(api_id_raw)
except Exception:
    raise ValueError("API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

if not session_string:
    raise RuntimeError("SESSION_STRING –Ω–µ –∑–∞–¥–∞–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ª–æ–∫–∞–ª—å–Ω–æ –∏ –¥–æ–±–∞–≤—å –≤ env.")

# --- –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç –¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ---
client = TelegramClient(StringSession(session_string), api_id, api_hash)

EXCLUDED_GROUPS = [
    '–°–∫—É–ø—ã UNION',
    'USF || –ß–∞—Ç —Å–ª–∏–≤–æ–≤',
    '–û—Ç–∑—ã–≤—ã —Å –ø—Ä–æ–¥–∞–∂',
    '–û—Ç–∑—ã–≤—ã —Å –¢–µ–π–≤–∞—Ç–∞',
    'STOP SCAM | –ö–ò–î–ö–ò | TRASH',
    '–ì–∞—Ä–∞–Ω—Ç—ã Genshin Impact | SS PROJECT | GENSHIN | HSR | HONKAI | GARANTS',
    123456789
]

def dialog_sort(dialog):
    return getattr(dialog, 'unread_count', 0) or 0

def spammer(client):
    total_sent = 0

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –ù–ï—Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ "Saved Messages"
    msg = None
    # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ
    for m in client.iter_messages('me', limit=50):
        if isinstance(m, MessageService):
            continue
        # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if getattr(m, 'message', None) is None and not getattr(m, 'media', None):
            continue
        msg = m
        break

    if not msg:
        print("‚ö†Ô∏è –í 'Saved Messages' –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏. –ü–æ–ª–æ–∂–∏ —Ç—É–¥–∞ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏.", flush=True)
        return

    print(f"DEBUG: –í—ã–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏: id={msg.id}, text_preview={str(msg.message)[:80]}", flush=True)

    def create_groups_list():
        groups = []
        for dialog in client.iter_dialogs():
            if getattr(dialog, 'is_group', False) and getattr(dialog, 'unread_count', 0) >= 1:
                name = getattr(dialog, 'name', None)
                username = getattr(getattr(dialog, 'entity', None), 'username', None)
                if name in EXCLUDED_GROUPS or username in EXCLUDED_GROUPS or dialog.id in EXCLUDED_GROUPS:
                    continue
                groups.append(dialog)
        return groups

    print("üîÅ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª —Ä–∞—Å—Å—ã–ª–∫–∏...", flush=True)
    k = 0
    while True:
        print("DEBUG: –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø...", flush=True)
        groups = create_groups_list()
        print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(groups)} –≥—Ä—É–ø–ø –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.", flush=True)
        groups.sort(key=dialog_sort, reverse=True)

        for g in groups:
            try:
                # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ msg –≤–¥—Ä—É–≥ —Å–ª—É–∂–µ–±–Ω–æ–≥–æ —Ç–∏–ø–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if isinstance(msg, MessageService):
                    print("‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å–ª—É–∂–µ–±–Ω–æ–≥–æ —Ç–∏–ø–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª.", flush=True)
                    break

                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å
                client.forward_messages(g, msg, 'me')
                target_name = g.name or getattr(g.entity, 'username', None) or str(g.id)
                print(f'‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: {target_name}', flush=True)
                k += 1
                total_sent += 1

                delay_random = random.randint(5, 12)
                print(f'‚è± –ü–∞—É–∑–∞ {delay_random} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º...', flush=True)
                sleep(delay_random)

            except errors.ForbiddenError as o:
                try:
                    client.delete_dialog(g)
                except Exception:
                    pass
                print(f'‚õî ForbiddenError –¥–ª—è {getattr(g, "name", g.id)} ‚Äî —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞. ({o})', flush=True)

            except errors.FloodError as e:
                secs = getattr(e, 'seconds', None)
                if secs:
                    print(f'üê¢ FloodError: –æ–∂–∏–¥–∞–Ω–∏–µ {secs} —Å–µ–∫...', flush=True)
                    sleep(secs)
                else:
                    print(f'üê¢ FloodError (–±–µ–∑ seconds) ‚Äî –∂–¥–∞—Ç—å {base_delay} —Å–µ–∫', flush=True)
                    sleep(base_delay)

            except PeerIdInvalidError:
                try:
                    client.delete_dialog(g)
                except Exception:
                    pass
                print(f'‚ö†Ô∏è PeerIdInvalidError ‚Äî –¥–∏–∞–ª–æ–≥ —É–¥–∞–ª—ë–Ω: {getattr(g, "name", g.id)}', flush=True)

            except MessageTooLongError:
                print(f'‚ö†Ô∏è MessageTooLongError –¥–ª—è {getattr(g, "name", g.id)}', flush=True)

            except errors.BadRequestError as i:
                text_i = str(i)
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–æ–ø–∏–∫–∏
                if "TOPIC_CLOSED" in text_i or "topic_closed" in text_i.lower():
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä—ã—Ç—É—é —Ç–µ–º—É: {getattr(g, 'name', g.id)}", flush=True)
                    continue
                # –ù–µ–ª—å–∑—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if "Cannot forward messages" in text_i or "message type" in text_i.lower():
                    print(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å (BadRequest): {text_i} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {getattr(g, 'name', g.id)}", flush=True)
                    continue
                print(f'‚ùó BadRequestError: {i}', flush=True)

            except errors.RPCError as a:
                print(f'‚ùó RPCError: {a}', flush=True)

            except Exception as ex:
                # –õ–æ–≤–∏–º —Ç–∏–ø —Å–ª—É–∂–µ–±–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ Telethon –±—Ä–æ—Å–∏–ª –∏–Ω–∞—á–µ
                txt = str(ex)
                if "Cannot forward messages" in txt or "MessageService" in txt:
                    print(f'‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {txt}', flush=True)
                    continue
                print("‚ùó Unexpected error:", ex, flush=True)

        print(f'–ò—Ç–æ–≥ —Ü–∏–∫–ª–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {k} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ. –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}', flush=True)
        k = 0
        full_delay = base_delay + random.randint(2, 7)
        print(f'üîÅ –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏: {full_delay} —Å–µ–∫...', flush=True)
        sleep(full_delay)

def run_server():
    class Handler(http.server.SimpleHTTPRequestHandler):
        pass
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print(f"HTTP server running on port {PORT}", flush=True)
        httpd.serve_forever()

# --- –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ ---
threading.Thread(target=run_server, daemon=True).start()

# --- –ì–ª–∞–≤–Ω–æ–µ: –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –∑–∞–ø—É—Å–∫–∞–µ–º spammer ---
if __name__ == "__main__":
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
        print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º client...", flush=True)
        client.connect()
        if not client.is_user_authorized():
            raise RuntimeError("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å SESSION_STRING.")
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...", flush=True)

        spammer(client)

    except Exception as e:
        print("Fatal error:", e, flush=True)
    finally:
        try:
            client.disconnect()
        except Exception:
            pass

